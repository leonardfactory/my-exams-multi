var app;

app = angular.module('app', ['ionic', 'ngStorage']);

app.run(function($ionicPlatform) {
  return $ionicPlatform.ready(function() {
    if (window.cordova && window.cordova.plugins.Keyboard) {
      cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
    }
    if (window.StatusBar) {
      return StatusBar.styleDefault();
    }
  });
});

app.config(function($stateProvider, $urlRouterProvider) {
  $stateProvider.state("tab", {
    url: "/tab",
    abstract: true,
    templateUrl: "templates/tabs.html"
  }).state('tab.exams', {
    url: '/exams',
    views: {
      'tab-exams': {
        templateUrl: 'templates/tab-exams.html',
        controller: 'ExamsController'
      }
    }
  }).state('tab.stats', {
    url: '/stats',
    views: {
      'tab-stats': {
        templateUrl: 'templates/tab-stats.html',
        controller: 'StatsController'
      }
    }
  }).state('tab.settings', {
    url: '/settings',
    views: {
      'tab-settings': {
        templateUrl: 'templates/tab-settings.html',
        controller: 'SettingsController'
      }
    }
  });
  return $urlRouterProvider.otherwise('/tab/exams');
});

var ExamsController;

app.controller('ExamsController', ExamsController = (function() {
  function ExamsController($scope, $ionicModal, $localStorage) {
    this.$scope = $scope;
    this.$scope.$storage = $localStorage;
    this.$scope.status = {
      canSwipe: true
    };
    this.$scope.exam = {};
    this.$scope.shownExamInfo = {
      isEditing: false,
      examIndex: -1
    };
    $ionicModal.fromTemplateUrl('templates/add-exam.html', {
      scope: this.$scope,
      animation: 'slide-in-up'
    }).then((function(_this) {
      return function(modal) {
        return _this.$scope.modal = modal;
      };
    })(this));
    this.$scope.addExam = (function(_this) {
      return function() {
        _this.$scope.exam = {};
        _this.$scope.shownExamInfo.isEditing = false;
        return _this.$scope.modal.show();
      };
    })(this);
    this.$scope.saveExam = (function(_this) {
      return function() {
        if (_this.$scope.$storage.exams == null) {
          _this.$scope.$storage.exams = [];
        }
        if (_this.$scope.shownExamInfo.isEditing) {
          _this.$scope.$storage.exams[_this.$scope.shownExamInfo.examIndex] = _this.$scope.exam;
        } else {
          _this.$scope.$storage.exams.push(_this.$scope.exam);
        }
        return _this.$scope.modal.hide();
      };
    })(this);
    this.$scope["delete"] = (function(_this) {
      return function($index) {
        return _this.$scope.$storage.exams.splice($index, 1);
      };
    })(this);
    this.$scope.edit = (function(_this) {
      return function($index) {
        _this.$scope.exam = _this.$scope.$storage.exams[$index];
        _this.$scope.shownExamInfo.isEditing = true;
        _this.$scope.shownExamInfo.examIndex = $index;
        return _this.$scope.modal.show();
      };
    })(this);
    this.$scope.$on('modal.hidden', (function(_this) {
      return function() {
        return _this.$scope.exam = {};
      };
    })(this));
  }

  return ExamsController;

})());

//# sourceMappingURL=data:application/json;base64,